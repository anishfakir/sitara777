class AuditManager { constructor() { this.auditLogs = []; this.init(); } init() { console.log("ðŸ“‹ Audit Manager initialized"); } async loadData() { try { const auditSnapshot = await database.ref(DB_PATHS.AUDIT).once("value"); if (auditSnapshot.exists()) { this.auditLogs = []; auditSnapshot.forEach((childSnapshot) => { this.auditLogs.push({ id: childSnapshot.key, ...childSnapshot.val() }); }); } else { this.auditLogs = []; } this.renderAuditTable(); } catch (error) { console.error("Error loading audit logs:", error); showAlert("danger", "Failed to load audit data"); } } renderAuditTable() { const tableBody = document.getElementById("auditTableBody"); if (!tableBody) return; if (this.auditLogs.length === 0) { tableBody.innerHTML = `<tr><td colspan="7" class="text-center py-4"><div class="empty-state"><i class="fas fa-clipboard-list"></i><p>No audit logs found</p><small>Audit logs will appear here as actions are performed</small></div></td></tr>`; return; } tableBody.innerHTML = this.auditLogs.map(audit => this.createAuditRow(audit)).join(""); } createAuditRow(audit) { const severityBadge = this.getSeverityBadge(audit.severity); return `<tr class="fade-in"><td><span class="badge bg-primary">${audit.action}</span></td><td><small class="text-muted">${audit.userName || "N/A"}</small></td><td><span class="badge bg-info">${audit.resourceType}</span></td><td><span class="text-muted">${audit.description}</span></td><td>${severityBadge}</td><td><small class="text-muted">${formatDate(audit.timestamp)}</small></td><td><div class="action-buttons"><button class="btn btn-sm btn-outline-primary" onclick="auditManager.viewAudit(\"${audit.id}\")"><i class="fas fa-eye"></i></button></div></td></tr>`; } getSeverityBadge(severity) { const badges = { low: "<span class=\"badge bg-info\">Low</span>", medium: "<span class=\"badge bg-warning\">Medium</span>", high: "<span class=\"badge bg-danger\">High</span>" }; return badges[severity] || "<span class=\"badge bg-secondary\">Unknown</span>"; } } let auditManager; document.addEventListener("DOMContentLoaded", () => { auditManager = new AuditManager(); window.auditManager = auditManager; });
