class AuthManager{constructor(){this.init()}init(){this.bindEvents();this.checkAuthState();console.log("🔐 Auth Manager initialized")}bindEvents(){const loginForm=document.getElementById("loginForm");if(loginForm){loginForm.addEventListener("submit",(e)=>{e.preventDefault();this.handleLogin()})}const passwordToggle=document.querySelector(".password-toggle");if(passwordToggle){passwordToggle.addEventListener("click",()=>{this.togglePassword()})}const rememberMe=document.getElementById("rememberMe");if(rememberMe){rememberMe.addEventListener("change",(e)=>{localStorage.setItem("rememberMe",e.target.checked)})}const savedRememberMe=localStorage.getItem("rememberMe");if(savedRememberMe==="true"&&rememberMe){rememberMe.checked=true}}checkAuthState(){auth.onAuthStateChanged((user)=>{if(user){console.log("User already logged in:",user.email);this.checkAdminStatus(user.uid)}})}async handleLogin(){const email=document.getElementById("email").value;const password=document.getElementById("password").value;const rememberMe=document.getElementById("rememberMe").checked;if(!email||!password){showAlert("danger","Please enter both email and password");return}this.setLoadingState(true);try{const userCredential=await auth.signInWithEmailAndPassword(email,password);const user=userCredential.user;console.log("Login successful:",user.email);const isAdmin=await this.checkAdminStatus(user.uid);if(isAdmin){if(rememberMe){await auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)}else{await auth.setPersistence(firebase.auth.Auth.Persistence.SESSION)}await this.logLoginActivity(user.uid,user.email,"success");setTimeout(()=>{window.location.href="/dashboard.html"},1000);showAlert("success","Login successful! Redirecting to dashboard...")}else{await auth.signOut();showAlert("danger","Access denied. Admin privileges required.");this.setLoadingState(false)}}catch(error){console.error("Login error:",error);await this.logLoginActivity(null,email,"failed",error.message);let errorMessage="Login failed. Please try again.";switch(error.code){case"auth/user-not-found":errorMessage="No account found with this email address.";break;case"auth/wrong-password":errorMessage="Incorrect password. Please try again.";break;case"auth/invalid-email":errorMessage="Please enter a valid email address.";break;case"auth/too-many-requests":errorMessage="Too many failed attempts. Please try again later.";break;case"auth/user-disabled":errorMessage="This account has been disabled.";break;case"auth/network-request-failed":errorMessage="Network error. Please check your connection.";break}showAlert("danger",errorMessage);this.setLoadingState(false)}}async checkAdminStatus(uid){try{const adminSnapshot=await database.ref(`${DB_PATHS.ADMINS}/${uid}`).once("value");if(adminSnapshot.exists()){const adminData=adminSnapshot.val();if(adminData.isAdmin){console.log("Admin access confirmed");sessionStorage.setItem("adminData",JSON.stringify(adminData));return true}}return false}catch(error){console.error("Error checking admin status:",error);return false}}async logLoginActivity(uid,email,status,errorMessage=null){try{const loginLog={uid:uid,email:email,status:status,timestamp:Date.now(),ipAddress:"127.0.0.1",userAgent:navigator.userAgent,errorMessage:errorMessage};await database.ref("login_attempts").push(loginLog)}catch(error){console.error("Error logging login activity:",error)}}setLoadingState(loading){const loginBtn=document.querySelector(".btn-login");const btnText=document.querySelector(".btn-text");const btnLoader=document.querySelector(".btn-loader");if(loading){loginBtn.classList.add("loading");loginBtn.disabled=true}else{loginBtn.classList.remove("loading");loginBtn.disabled=false}}togglePassword(){const passwordInput=document.getElementById("password");const toggleBtn=document.querySelector(".password-toggle i");if(passwordInput.type==="password"){passwordInput.type="text";toggleBtn.className="fas fa-eye-slash"}else{passwordInput.type="password";toggleBtn.className="fas fa-eye"}}async handleLogout(){try{await auth.signOut();sessionStorage.removeItem("adminData");localStorage.removeItem("rememberMe");showAlert("success","Logged out successfully");setTimeout(()=>{window.location.href="/login.html"},1000)}catch(error){console.error("Logout error:",error);showAlert("danger","Error during logout")}}async handlePasswordReset(email){try{await auth.sendPasswordResetEmail(email);showAlert("success","Password reset email sent. Please check your inbox.")}catch(error){console.error("Password reset error:",error);let errorMessage="Failed to send password reset email.";switch(error.code){case"auth/user-not-found":errorMessage="No account found with this email address.";break;case"auth/invalid-email":errorMessage="Please enter a valid email address.";break;case"auth/too-many-requests":errorMessage="Too many requests. Please try again later.";break}showAlert("danger",errorMessage)}}getCurrentUser(){const user=auth.currentUser;if(user){const adminData=sessionStorage.getItem("adminData");return{uid:user.uid,email:user.email,displayName:user.displayName,adminData:adminData?JSON.parse(adminData):null}}return null}isAuthenticated(){return auth.currentUser!==null}isAdmin(){const adminData=sessionStorage.getItem("adminData");return adminData?JSON.parse(adminData).isAdmin:false}}window.togglePassword=function(){if(window.authManager){window.authManager.togglePassword()}};window.handleLogout=function(){if(window.authManager){window.authManager.handleLogout()}};window.handlePasswordReset=function(){const email=document.getElementById("email").value;if(!email){showAlert("danger","Please enter your email address first");return}if(window.authManager){window.authManager.handlePasswordReset(email)}};let authManager;document.addEventListener("DOMContentLoaded",()=>{authManager=new AuthManager();window.authManager=authManager});window.addEventListener("load",()=>{const emailInput=document.getElementById("email");if(emailInput){emailInput.focus()}});
