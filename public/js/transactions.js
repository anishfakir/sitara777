class TransactionManager { constructor() { this.transactions = []; this.init(); } init() { console.log("ðŸ’° Transaction Manager initialized"); } async loadData() { try { const transactionsSnapshot = await database.ref(DB_PATHS.TRANSACTIONS).once("value"); if (transactionsSnapshot.exists()) { this.transactions = []; transactionsSnapshot.forEach((childSnapshot) => { this.transactions.push({ id: childSnapshot.key, ...childSnapshot.val() }); }); } else { this.transactions = []; } this.renderTransactionsTable(); } catch (error) { console.error("Error loading transactions:", error); showAlert("danger", "Failed to load transactions data"); } } renderTransactionsTable() { const tableBody = document.getElementById("transactionsTableBody"); if (!tableBody) return; if (this.transactions.length === 0) { tableBody.innerHTML = `<tr><td colspan="7" class="text-center py-4"><div class="empty-state"><i class="fas fa-receipt"></i><p>No transactions found</p><small>Transactions will appear here as users make payments</small></div></td></tr>`; return; } tableBody.innerHTML = this.transactions.map(transaction => this.createTransactionRow(transaction)).join(""); } createTransactionRow(transaction) { const typeBadge = this.getTypeBadge(transaction.type); const statusBadge = this.getStatusBadge(transaction.status); return `<tr class="fade-in"><td><small class="text-muted">${transaction.id}</small></td><td><span class="text-muted">${transaction.userName || "N/A"}</span></td><td>${typeBadge}</td><td><span class="badge bg-info">â‚¹${transaction.amount || 0}</span></td><td>${statusBadge}</td><td><small class="text-muted">${formatDate(transaction.createdAt)}</small></td><td><div class="action-buttons"><button class="btn btn-sm btn-outline-primary" onclick="transactionManager.viewTransaction(\"${transaction.id}\")"><i class="fas fa-eye"></i></button></div></td></tr>`; } getTypeBadge(type) { const badges = { recharge: "<span class=\"badge bg-success\">Recharge</span>", withdrawal: "<span class=\"badge bg-warning\">Withdrawal</span>", bet: "<span class=\"badge bg-info\">Bet</span>", payout: "<span class=\"badge bg-primary\">Payout</span>" }; return badges[type] || "<span class=\"badge bg-secondary\">Unknown</span>"; } getStatusBadge(status) { const badges = { pending: "<span class=\"badge bg-warning\">Pending</span>", approved: "<span class=\"badge bg-success\">Approved</span>", rejected: "<span class=\"badge bg-danger\">Rejected</span>", completed: "<span class=\"badge bg-success\">Completed</span>" }; return badges[status] || "<span class=\"badge bg-secondary\">Unknown</span>"; } } let transactionManager; document.addEventListener("DOMContentLoaded", () => { transactionManager = new TransactionManager(); window.transactionManager = transactionManager; });
