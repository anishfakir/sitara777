class UserManager { constructor() { this.users = []; this.init(); } init() { console.log("ðŸ‘¥ User Manager initialized"); } async loadData() { try { const usersSnapshot = await database.ref(DB_PATHS.USERS).once("value"); if (usersSnapshot.exists()) { this.users = []; usersSnapshot.forEach((childSnapshot) => { this.users.push({ id: childSnapshot.key, ...childSnapshot.val() }); }); } else { this.users = []; } this.renderUsersTable(); } catch (error) { console.error("Error loading users:", error); showAlert("danger", "Failed to load users data"); } } renderUsersTable() { const tableBody = document.getElementById("usersTableBody"); if (!tableBody) return; if (this.users.length === 0) { tableBody.innerHTML = `<tr><td colspan="6" class="text-center py-4"><div class="empty-state"><i class="fas fa-users"></i><p>No users found</p><small>Users will appear here when they register</small></div></td></tr>`; return; } tableBody.innerHTML = this.users.map(user => this.createUserRow(user)).join(""); } createUserRow(user) { const statusBadge = user.status === "active" ? "<span class=\"badge bg-success\">Active</span>" : "<span class=\"badge bg-danger\">Blocked</span>"; return `<tr class="fade-in"><td><div><h6 class="mb-0">${user.name || "N/A"}</h6><small class="text-muted">ID: ${user.id}</small></div></td><td><span class="text-muted">${user.phone || "N/A"}</span></td><td><span class="badge bg-info">â‚¹${user.walletBalance || 0}</span></td><td>${statusBadge}</td><td><small class="text-muted">${formatDate(user.createdAt)}</small></td><td><div class="action-buttons"><button class="btn btn-sm btn-outline-primary" onclick="userManager.viewUser(\"${user.id}\")"><i class="fas fa-eye"></i></button><button class="btn btn-sm btn-outline-warning" onclick="userManager.toggleUserStatus(\"${user.id}\")"><i class="fas fa-ban"></i></button></div></td></tr>`; } } let userManager; document.addEventListener("DOMContentLoaded", () => { userManager = new UserManager(); window.userManager = userManager; });
